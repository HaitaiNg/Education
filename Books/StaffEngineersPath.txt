Staff Engineers Path 

Rather than deny reality and search for possible use cases for what they’d created, they killed the project and wrote a detailed retrospective. Was that a failure? Not really! Other teams were disappointed not to get the system they were hoping for.

Sunk cost fallacy. It's about how people view the investments of time, money, and energy they’ve already made: if you’ve already put a lot of time and energy into something, you’re more likely to stick around and see it through, even if that’s a bad idea. It can be difficult to break out of this frame of mind, but without a highly tuned sense of whether something’s still a good idea, you can stay on the wrong path for a long time. Try to notice if you’re in an impossible situation; if so, bail out early. Pushing out with a doomed project is just postponing the inevitable and it prevents you from doing something more useful. Good judgment includes knowing when to cut your losses and stop. 

Be competent. As a staff plus engineer, or any senior person, a big part of your role is to take on things that need to be done and reliably do them well. Competence includes building (and keeping) knowledge and skills, being self-aware and having high standards 

The degree to which other people want to work with you is a direct indication of how successful you’ll be in your career as an engineer. Be the engineer that everyone wants to work with. The metric for success is whether other people want to work with you. If they don’t reevaluate your approach 

It takes time to develop technical skills. You can learn a lot from books but there’s no substitute for working through the problems yourself, learning your own techniques for solving them, and seeing what works and what does not work. “You want to get so good at your craft that your focus can be almost entirely on what other people are doing and you don’t have to worry about your own execution”. 

Grade V - Senior engineer (8+ years)
Grade VI - Principal engineer (10+ years)
Grade VII - Director, city engineer, division engineer (15+ years)

Don’t rush past your prime learning years. 
Senior people own the whole problem, not just the parts that go as planned. When something goes wrong, you don’t shrug and decide the work is impossible. You navigate the problem and you’re accountable for the result. 

Competence comes from experience. Be self-aware of what you know and what you do not know. Strive to be consistent, reliable, and trustworthy. Be aware of your business, budgets, user needs, and the capabilities of your team. Design software that is easy to decommission. 

Code reviews: 

Understand what is being completed; Give an example of what could be better; Be clear about what matters. Should this work exist? What problem does your colleague intend to solve? Are they using a technical solution to solve a problem that should have been solved by talking to someone?

 Does this work actually solve the problem? Will the solution work? Will users be able to do what they need and what they expect? Are there errors or typos? Any bugs or performance issues? Does the design propose using a system in a way that does not work?

 How will it handle failure? How will the solution handle weird edge cases, malformed input. The network randomly disappearing, load spikes, or whatever else can go wrong? Will it fail in a clean way, or will it corrupt data or take a user’s money without giving them the service they’ve paid for?

Is it understandable? Will other people be able to maintain and debug new code or systems? Are the components or variables named intuitively? Is this complexity contained in a well-chosen place?

Does it fit into the bigger picture? Does the change set a precedent or create a pattern that we want other people to copy? Does it force other teams to do extra work for future changes? Is this a risky change that’s scheduled at the same time as a high-profile launch?

Do the right people know about it? Is everyone copied // CC’d  on the change who should be? Are there names attached to any actions that need to happen, or is there a lot of passive voice where it isn’t clear which team is doing what?A good guardrail is not an arbitrary gatekeeper; you’re on the same side as the person you’re keeping safe, and you want them to succeed. 

The best way you can be a catalyst in the industry is by empowering your colleagues to become great engineers who do great things. 

For someone to be promoted to your level, they don’t need to be as good as you are now: they need to be as good as you were when you were first promoted to that level. 
Three reasons why you want to improve your coworker’s skills
- getting more done; keeping your technology up to date; and improving the industry,.; other’s people growth is your growth 

What's important to you?
Being financially secure; supporting your family; having a flexible schedule; learning a lot; being visible; doing cool things; challenging yourself; building wealth; working for yourself; making a difference; enabling your vocation; making friends; traveling the world; taking care of your health and so on.

Reasons to stay in the same company:
Feedback loops: staying in one place for longer gives you the feedback loop that comes from seeing the consequences of your actions. When engineers move around a lot, everyone’s seeing the result of someone else’s past decisions instead of the outcomes of their own

Depth: the more you know a single domain or a single stack, the deeper and more nuanced your understanding will get. It takes time to intuitively understand something so well that you can build in the knowledge. It's also faster to do things you’ve done before; you’ll be able to make progress more quickly

Relationships You've invested time in knowing people all over the organization, and you have people you trust and enjoy working with. You’ve built up enough mutual goodwill that even the biggest technical disagreements are collegial, not heapted. 

Context. 

Reasons to move
Employability. If you stay at one place for a very long time, you might be learning how to work in that culture rather than learning transferable skills. The outside world can shift, and you can get left behind 

Experiences: There will be a limited number of experiences available in any one place, and a limited number of people to learn from. Once you’ve collected everything available, you might be ready for something new 

Growth: step up vertically, or compensation increase by leaning for a new job. 
Mismatch: If you want to become an industry expert, sometimes you need to switch jobs in order to find that particular role / niche.

Technologies and your business will change, and even leadership skills can slowly become old fashioned if you don’t keep them up to date. Social norms, communication styles, best practices… it's all going to change. So staying still probably means moving and learning a little, just enough to stay up to date.

Changing teams at a company: an internal transfer can be a great move. You keep a good amount of your context, relationships, credibility, and social capital but you get to start fresh on something new. Think of this kind of restart as being like an experienced player of a game making a new low-level character. Moving between teams and organizations can be an excellent way of building bridges; you’ll still have contracts on your own team, and you'll bring knowledge and culture with you to the new one. 

Everything is learnable if it's worth the time investment. 

Check in with yourself occasionally and make sure your role is still giving you what you need. 

The best frontline engineering managers are the ones that are never more than 2-3 years removed from hands-on work, full time down in trenches. The ICs are the ones who have done time in management. And the best technical leaders in the world are often the ones who do both. Back and forth. Like a pendulum. Switching to management, is a change in profession with a different set of skills to learn. There should be no change in status when you go from people leadership to technical leadership or vice versa. You can only improve at one of these at a time: engineering or management. 

When you switch to a new job: restart. You’ll need to build perspective again and draw a new locator map. You’ll need to learn the terrain, vulture, and politics and draw a new topographical map.
Engineering leaders brought into embattled organizations tasked with stabilizing the chas are often heavily incentivized to do this. Many times, these folks in my experience fail harder and more often than those who try to learn the organizational ropes and tailor their leadership style to fit the organizational culture. 

