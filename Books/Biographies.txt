-------------------------------------------------------------------------------- 
Jamie Dion & Steve Jobs
-------------------------------------------------------------------------------- 
People are expected to do what it takes to get the 
job done, 
but they don’t have to go at it alone.
Not getting the job done, though is never an option 
- Jamie Dimon 

We all have a short period of time on this earth.
We probably only have the opportunity to do a few things 
really great and do them well. 
None of us has any idea how long we’re going to be 
here, nor do I, 
but my feeling is I’ve got to accomplish a lot of 
things while I’m young. 
— Steve Jobs

-------------------------------------------------------------------------------- 
Career movement
-------------------------------------------------------------------------------- 

This role is aligned with where I want to grow in my 
career and what 
I’ve been working towards, and given my skills and 
experiences. 
I feel I can make a significant contribution to both 
this team and company, 
as as part of the overall team help drive the the company 
the next level. 

Why are you looking to leave your current position? 
My previous role was very rewarding and enabled me 
to make a 
contribution to the company and its partners and customers, 
however I feel I am ready to take on a larger role 
and set of 
responsibilities and my current company is not at a 
stage where they 
can offer me this opportunity

If you have a long gap between your last role / position 
After being let go from my previous company, I took 
some time off to reflect on 
what is important to me in my career and to ensure 
I had time to update my 
skills and perspective ahead of moving into my next 
role. I took some off 
due to family, travel, recharge and fresh skills

Work environment: I like to be surrounded by colleagues 
who are passionate and 
energized about what they do. This fuels my energy 
levels and helps me perform at work 

Why should we hire you?
My experience working in a variety of roles and across 
the entire organization 
has provided me with a strong ability to apply my skills 
to your team and 
contribute to the success of the team and company. 

------------------------------------------------------------------------------- 
People's Style at Work And Beyond 2nd Edition
-------------------------------------------------------------------------------- 

** Analytical: less assertiveness, less responsiveness. 
Analytical: Logical, Systematic, Thorough, Prudent 
Serious. 
Analytic Strength becomes weaknesses when overused 
Prudent -> Indecisive; Painstaking -> Nitpicky; Task-Oriented 
-> Impersonal; 
 Systematic -> Bureaucratic
** Driver: more assertiveness, less responsiveness 
Driver: Efficient, Decisive, Pragmatic, Independent, 
Candid 
Driver's Strength becomes weaknesses when overused 
Independent -> Poor collaborator; Results-oriented 
-> Impersonal; 
Candid -> Abrasive; Pragmatic -> Shortsighted.
**Amiable: less assertiveness more responsiveness
Amiable: Cooperative, Supportive, Diplomatic, Patient, 
Loyal 
Amiable's Strength becomes weaknesses when overused 
Diplomatic -> Conflict Avoider; Cautious -> Risk Averse; 
Supportive -> Permissive; 
People-oriented -> Inattentive to task;
**Expressive: more assertiveness more responsiveness 
Expressive: Persuasive, Enthusiastic, Outgoing, Spontaneous, 
Fun-Loving 
Expressive's Strength becomes weaknesses when overused 
Articulate -> Poor listener; Fast-paced -> Impatient; 
Visionary -> Impractical; 
Fun-Loving -> Distracting. 

Backup Styles. Expressive's attack. Drivers become 
autocratic. Amiable's acquiesce. 
Analytical's avoid participation and emotional investment. 

Ask your manager: 
How often do you want me to fill you in on what I am 
doing? 
Would you prefer a detailed analysis, a brief summary 
with recommendations, or some other approach? 
In my last report did I give too much or too little 
information? 
Do you have any suggestions about how I could present 
information like this in away that would be more useful 
to you? 

---------------------------------
Grokking The Behavioral Interview
---------------------------------

I just heard my own response and it sounds a bit rehearsed. 
I really prepared for this interview because it is 
important to me. You can 
count on my answers being genuine even if they are 
practiced. 

Behavioral Interview Questsions are said to be 55 percent 
predictive of future 
on-the-job behavior. 
Are you calm under pressure? Are you comfortable giving 
formal presentations? 
Can you respectfully give your boss bad news? The focus 
of this interview 
is to see your ability in whether you can work in teams 
and collaborate with others 

Behavioral interviews exists to test whether you are 
the person who 
will get overwhelmed with the job in three months and 
cause commotion. 

Homework: Research the organization, study the values 
of the organization, practice 
the response. 
Information like the organization’s mission statement, 
history, products, services, management, 
and culture will all be present on their website. 

Industry. Competitions and competitors. Mission and 
values. 
Most important products and services. What is the size 
of the industry with respect 
to the national or global economy. 

Time when you felt a huge sense of accomplishment or 
success? 
Data Usage (Automation Testing) / Testing of status 
on data nodes 
SQL UDF to allow user impersonation
Catalog of HDFS directories 

Time when you fixed something that wasn't working? 
UAT and Production errors 
HBase, Hive, Impala 
Fixing jobs on a periodic build 

Time when you made a challenging decision? Software 
Design, UML 

Time when you had to influence a leader or team? FitNesse 
(Automation Testing) 
Unit Testing, code quality, code reviews,
documentation 

Time when you got suprised by something or overlooked 
something? Rules & Policies 
Corporate policy on automation, approvals, etc. 

Time when you removed barriers or came up with a creative 
solution?  Standardization. Automation
because I manual intensive taks 

A time when you failed but learned? 
Data Summarization. Proof of concept but I struggled 
with this. 

A time when you had to defuse an escalating situation? 
Data on-boarding (time sensitive)   

Avoid talking in absolutes: (Never and Always)
You don’t have to wait until you need a moment. 
You can take a moment each time. 
This shows confidence and sets a relaxed and natural 
conversational pace. 

Use "I" instead of "We" 
I learned how important it is to take responsibility 
for a failure 
as the leader of a team. A few members of the team 
expressed their 
concerns about additional hardware testing, that I 
completely dismissed 

"Great to hear from you. I am not at my desk and will 
not be able 
to give this call the attention it deserves. When can 
I call you back?" 

"You want to be extra rigorous about making the best 
poissible thing 
you can. Find everything that's wrong with it and fix 
it. Seek negative 
feedback particularly from friends" - Elon Musk 

"You cant connect the dots looking forward, you can 
only connect them 
looking backward. So, you have to trust that the dots 
will somehow 
connect in your future" - Steve Jobs 

A few simple rules 
1. Always have questions ready to ask the interviewer 
(4-5) 
2. Ask questions that came up during the interview 
if you feel comfortable 
3. Ask questions so that the interviewer can talk about 
themself 
4. Ask open-ended questions 
5. If you run out of time or the interviewer is anxious 
to leave, 
then state "I have a few more questions but I can send 
them to the recruiter. 
Thank you so much for your time" 

Sample questions: 
What are the most exciting projects you've worked on 
here? 
What do you like most about the organization? 
Can you describe the organization's overall management 
style and the type 
of person who usually does well here? 
Tell me about your most successful employees. What 
do they do that 
really sets them apart? 
What's your timeline for the next steps? 
Are there resources I could review in advance to get 
a head start 
on the learning curve? 
How has this organization changed since you joined? 
Is there anything about my background or resume that 
makes you 
question whether or not I am a good fit for this role? 

While on Job
* Make a daily habit of acquiring new skills.
* Read code written by brilliant engineers.
* Jump fearlessly into code you don't know.
* Always be learning. Invest in skills that are in 
high demand. 
* Read Books. Attend Conferences.
* Build and maintain strong relationships.
Manage complexity through Abstraction
* Example: MapReduce.
* Right abstractions make huge difference.
* “Pick the right ones, and programming will flow 
naturally from design; modules will have small and 
simple interfaces; and new functionality will more 
likely fit in without extensive reorganization,” 
* “Pick the wrong ones, and programming will be a 
series of nasty surprises: interfaces will become baroque 
and clumsy as they are forced to accommodate unanticipated 
interactions, and even the simplest of changes will 
be hard to make.” 
* The right abstraction can increase engineering productivity 
by an order of magnitude. 
* Simple abstractions avoid interweaving multiple concepts, 
so that you can reason about them independently rather 
than being forced to consider them together. 
* Designing good abstractions take work.
* An abstraction's usage and popularity provides a 
reasonable proxy for its quality. 

Automate Testing
* Unit test cases and some integration testing provide 
a scalable way of managing growing codebase. 
* A suite of extensive and automated tests can reduce 
overall error rates by validating the quality and by 
safeguarding against regressions. 
* Tests also allow engineers to make changes, especially 
large refactorings, with significantly higher confidence. 
* Despite its benefits, it can be difficult to foster 
a culture of automated testing. 
* Focus on high leverage tests.
* Writing more tests, creating a virtuous feedback 
cycle and saving more development time. 

You did not get along with your coworker for a project? 
Maybe talk about how you did not see eye to eye for 
the future of the codebase and you resolved it by making 
the architecture flexible enough to accommodate fo 

Your biggest weakness? Getting bored when new features 
are not challenging to implement because it means the 
code base you protect is clean (humble brag). No matter 
what answer you give, always always always tie it back 
to how you are committed to the quality and protection 
of your code. It doesn’t have to be directly. It 
can be a bit roundabout (ie. team cohesion). But if 
you cannot eventually tie it to the quality of your 
code, you are giving a bad answer! 

No company is going to value a guy who cannot think 
about the quality of their code or its future impact. 
At best, they’re just going to be fixing bugs all 
day. So always try to eventually pivot to your core 
values after answering the question. 

However, if you are asking questions about the code 
base, product cycle, releases, migrations to new languages, 
how new features get approved, etc., then it's a different 
ballgame. Engineers who are looking to play a bigger 
role and expand their presence and skill have a natural 
inclination to ask these questions because they understand 
how each of these elements affects their work. They 
are more valuable to the company because it is more 
cost-effective to grow talent than to hire new talent 
and spend 6 months ramping them up on a code base before 
they contribute anything meaningful. 

1. I suck at estimating how long something will take 
me - I know everyone sucks at estimating but I feel 
especially weak in this area. 
2. I get frustrated when I'm blocked - I'm not going 
to sit and do nothing but if I'm constantly blocked 
I get pretty snarky when I could be more professional. 
3. I need to be told I'm doing a good job - this is 
a personality trait of mine but if my managers and 
other team members don't outwardly make an effort to 
thank me, my work suffers. 
4. I struggle with work/life balance 


-------------------------------------------------------------------------------- 
The Triathlete's Training Bible: The World's Most Comprehensive Training Guide 4th Edition 
-------------------------------------------------------------------------------- 
Successful Olympians (8) 
-Paid meticulous attention to their goals
-Had a strong inner drive to stay ahead of their competition
-Concentrated on excellence
-Were not distracted by other people or athletes
-Shrugged off their own failures
-Rebounded from defeat easily
-Never self flagellated 
-Celebrated their wins 
-Analyzed the reasons for their success
-Were very confident of their abilities 

Intermediate triathletes in their second and third year in the sport should focus on 
Increasing the duration of swims, bike rides, and runs 

Super compensation

Rules for training (159) 
Two workouts in each sport per week
Two or three workouts in any one of the three sports should be spaced out 
Do not have back to back days with several days off until you do the sport again 

The closer in time you get to a race, the more like the race your training should be (172) 

Nutrition
-Tart cherry juice prior to sleeping (176) 
-Eat protein in the evening as protein leads to less sleep disruptions 
-High carbohydrates can lead to multiple sleep disruptions 
-Nutrient dense: macronutrients and micronutrients 
-Highly processed foods tend to micronutrients 

Ideal recovery foods:
Bananas, Raisins, Juices, Potatoes, Grains, Pasta 
1.185 gram of carbohydrates per kg of body weight 
0.016-0.03 oz per pound 
150lb = 2.4-4.4 oz (68-127.6g of carbs) 
170lb = 2.7-5.1oz (76-144g of carbs) 

10-30 grams of protein 

1 Egg is 7grams of protein 
1 Banana is 28grams of carbs 


-------------------------------------------------------------------------------- 
Machine Learning Engineered Podcast 
-------------------------------------------------------------------------------- 
Treat employees like people
Resolve blockers, provide resources, area of growth mindset 
Managers step up and protect team also give credit to the team 
Be a good mentor / aspiration for the team 
Balance multiple hats 

MLE : cannot be a pure data scientist; entrepreneurship; 
Venture / curious in the unknown; systems engineering; 

Kaggle / Jupiter notebooks; Build, create, innovate 



