Refresh Date: 07.17.20 

---------------------------
The Software Architect Elevator
---------------------------
Technical architects should ride the elevator up and 
down 
The architect can get feedback on decisions and to 
understand their ramifications at the implementation 
level. 
Architects should be viewed like gardeners. They are 
to trim and prune what doesn’t fit and to established 
an overall balance and harmony in the garden 

Automated tests breed confidence. It allows teams to 
change code confidently.

Impact: measure of how well an architect applies his 
or her skill to benefit the company 
	Usually measured by revenue or reduced cost. 

Leadership: architect advances the state of the practice 
Skill - Leadership - Impact 
mentors - amplify - apply 
feedback - community- priority 

Confirmation bias: describes our tendency to interpret 
data in such a way that supports our own hypotheses 
Loss aversion: escape a negative event 
Prospect theory: when faced with an opportunity, people 
tend to favor a smaller but guaranteed gain over the 
uncertain chance for a larger one 
Micromort value: the amount you are willing to pay 
to avoid the risk 

Asking questions in traditional organizations might 
not get you insights but defensiveness to cover up 
the lack of decision discipline 

Software architecture: 
The structure of the components of a system, their 
interrelationships, and principles and guidelines governing 
their design and evolution over time. 

A colleague once suggested that an architect’s key 
performance indicator (KPI) should be the number of 
decisions made. While decision making is a defining 
element of doing architecture. I had a feeling that 
making as many decisions as possible isn’t what drives 
my profession — bad approach equivalent
to the idea that a software 
engineer’s contribution is based on the lines of 
code they wrote 

Making critical decisions early comes with a major 
challenge, though: the beginning of the project is 
also the time of highest ignorance because little is 
known about the project as well as the technologies 
to be used. Therefore, architects are generally expected 
to draw on their ability to abstract from their past 
experience to get those decisions “right.” Consistent 
project cost and timeline overruns have hinted, though, 
that deciding the system structure early in a project 
is difficult at best, even for an all-knowing architect  

Martin Fowler concluded some time ago that the opposite 
is actually true: “one of an architect’s most important 
tasks is to eliminate irreversibility in software designs. 
So, instead of entrusting all crucial decisions to 
one person, a project can be better off by minimizing 
the number of early and irreversible decisions. For 
example, choosing a flexible or modular design can 
localize the scope of a later change and thus minimize 
the extent of up-front decision making.

Systems resist change. A lot of inertia. Amber organizations 
they are built on the assumption that what worked in 
the past will work in the future and it often served 
them well over thousands of years 

External consultants who are difficult to hold liable 
because they will have long moved to another project 
by the time the problems surface 

Thanks to abstraction, very few programmers still write 
assembly level code, read single data blocks from a 
hard disk or put individual data packets onto the network. 
This level of detail is hidden behind nicely wrapped 
high-level languages, files, and socket streams. These 
programming abstractions are very convenient and dramatically 
increasing productivity; try doing without them. 

If abstractions are useful you might wonder whether 
adding further abstraction layers could boost productivity 
even more. You could use libraries or services for 
all business functions. When raising the level of abstraction 
you face a fundamental dilemma: how do you make a really 
simple model without losing too much flexibility. The 
best abstractions are therefore those that solve and 
encapsulate the difficult part of the problem while 
leaving the user with sufficient flexibility. 

If an abstraction takes away too many things or the 
wrong things, it becomes overly restrictive and no 
longer applicable. If it takes away to few things, 
it didn’t accomplish much in terms of simplification 
and hence it is not very valuable 

MapReduce, a framework for distributed 
data processing, is a positive example: it abstracts 
away the gnarly parts of distributed data processing, 
such as controlling and scheduling many worker instances, 
dealing with failed nodes, aggregating data across 
nodes, and so on. But it nevertheless leaves the programmer 
enough flexibility to solve a wide range of problems 
and was extremely widely used within Google. 

That’s because running and supporting legacy applications 
is expensive: operational processes are often manual; 
the software may not be stable, necessitating constant 
attention; the software may not scale well, requiring 
the procurement of expensive hardware; lack of documentation 
means time-consuming trial-and-error troubleshooting 
in case of problems. These are reasons why legacy systems 
tie up valuable IT resources and skills, effectively 
devouring the brains of IT that could be applied to 
more useful tasks; for example, delivering features 
to the business. 

Tacit knowledge is knowledge that exists only in an 
employee’s heads but isn’t documented anywhere. 
Such undocumented knowledge can be a major overhead 
for large or rapidly growing organization because it 
can easily be lost and requires new employees to relearn 
things the organization should already know. Encoding 
tacit knowledge which existed only in an operator’s 
hand into a set of scripts, tools, or source code makes 
these processes visible and eases knowledge transfer 

I have a rather critical view of such behavior and 
generally advise management to not approve something 
that is not clear to them. If something is not comprehensive 
it is due to a lack of clarity. 

My translation for software engineers: when writing, 
assume that your readers use a single-pass compilation 
algorithm and don’t have access to a complete symbol 
table. This means that forward references aren’t 
allowed: you can only refer to terms and concepts that 
were already introduced. For the algorithmically minded, 
you’ll need to do a topological sort on your topic 
graph. What if there’s a circle? You’ll get a stack 
overflow, just like your audience! 

Writing good documents in an organization that is generally 
poor at writing can give you significant visibility, 
but it can also rock the political system. 

Internal organization black market
If the answer to “how long does it take to get a 
server” it “depends on who’s asking” then you 
have a black market 

Automated tests are your safety belt—how else would 
you be able to deploy code into production at a moment’s 
notice, e.g. in case of a serious problem? 

Fast Software Development & Deployment
Velocity: Assures you can make code changes quickly. 
If the code base is fraught with technical debt, duplication, 
you will lose speed right here 
Confidence: Code correctness. Code reviews, rigorous 
automated tests, small incremental releases. 
Repeatable: 100% automated. All time and energy should 
go into writing great features for your users, not 
into making each deployment work. 
Feedback: Feedback from monitoring to make sure you 
can spot production issues early and learn what your 
users need 
Secure: secure your runtime environment against accidental 
and malicious attacks, especially when deploying new 
features that are dependent on libraries that could 
contain exploits. 
Do not send a computer to do a human’s job. Companies 
tend to prefer to do things manual but do not realize 
that this option is very short sighted. 

It may be more beneficial to standardize connecting 
elements, such as monitoring or source control than 
endpoints such as laptops and IDEs 

The biggest enemy of change is complacency: if things 
are not so bad, the motivation to change is low. Organizations 
can artificially increase the pain of not changing, 
by creating fear or conjuring a (fake) crisis before 
the real crisis occurs. 

Google is infamous for dog fooding its own products, 
meaning its own employees get to try alpha or beta 
versions of new products. 

Bringing younger employees into the mix can help companies 
become digital as it brings some of your younger target 
customer segment in-house 

At Google, getting a USB charger cable was a matter 
of 2.5 minutes: 1 minute to walk to the nearest Tech 
Stop, 30 seconds to swipe your badge and scan the cable 
at the self-checkout, and 1 minute to walk back to 
your desk. To do this in corporate IT, I had to mail 
someone, who mailed someone, who asked me the type 
of phone I use and then entered an order, which I had 
to approve. Elapsed time: about 2 weeks. Speed factor: 
14 days × 24 hours/day × 60 minutes/hour / 2.5 minutes 
= 8064, in the same league as setting up a source code 
repository (Chapter 35). 

How can an organization have too much money? Their 
goal is to maximize profits and shareholder returns. 
To do so, companies use stringent budgeting processes 
that control spending. For example, proposed projects 
are assessed by their expected rate of return against 
a benchmark typically set by existing investments, 
sometimes called internal rate of return (IRR). 

Companies make investment decisions based on expected 
return at least use a consistent decision metric. Many 
rich companies have a different decision process that 
of the highest paid persons opinion. 

Outsourcing IT has severe drawbacks in the digital 
age because it excludes the organization from the critical 
innovation cycle 

Many companies try to overcome this hurdle by paying 
higher salaries. However, compensation is often not 
the main motivator for top candidates; they are looking 
for an employer where they can learn from their peers 
and have the freedom to implement projects rapidly. 
That’s why it’s difficult for companies to “buy” 
skilled employees. 

---------------------------
Software Engineering At Google
---------------------------

Lack Of Psychological Safety: An environment in which 
people are afraid to take risks or make mistakes in 
front of others because they fear being punished for 
it. This often manifests as a culture of fear or a 
tendency to avoid transparency. 

Information Islands: Knowledge fragmentation that occurs 
in different parts of an organization that don’t 
communicate with one another or use shared resources. 
In such an environment, each group develops its own 
way of doing things. This leads to information fragmentation. 

Information duplication: Each island has reinvented 
its own way of doing something. 
Information skew: Each island has its own way of doing 
the same thing, and these might or might not conflict. 
Single Point Of Failure: A bottleneck that occurs when 
critical information is available from only a single 
person. 
All-Or-Nothing Expertise: A group of people that is 
split between people who know “everything” and 
novices with little middle ground. This problem reinforces 
itself if experts always do everything themselves and 
don’t take the time to develop new experts through 
mentoring or documentation. In this scenario, knowledge 
and responsibilities continue to accumulate on those 
who already have expertise, and new team members or 
novices are left to fend for themselves and ramp up 
more slowly. 

Haunted Graveyards: Code that people avoid touching 
or changing because they are afraid that something 
might go wrong. 

Nooglers that ramp up take around six months. 
One of the biggest mistakes that beginners make is 
not to ask for help when they are stuck. It does not 
matter whether you are new to a team or a senior leader. 
You should always be in an environment in which there 
is something to learn. 

When you learn something from a one-to-one discussion, 
write it down. Chances are that future newcomers will 
have the same questions that you had. Do them a favor, 
and share what you write down. 

Readability: Google’s peer review of code. This instills 
confidence, and some sense of consistency across the 
firm. 

Performance ratings are indicative only of how a person 
is performing in their given role at the time they 
are being evaluated. Ratings, although an important 
way to measure performance during a specific, are not 
predictive of future performance and should not be 
used to gauge readiness for a future role or qualify 
an internal candidate for a different team. (They can, 
however, be used to evaluate whether an employee is 
properly or improperly slotted on their current team. 
They can provide an opportunity to evaluate how to 
better support an internal candidate moving forward) 

Your organization’s code base is sustainable when 
you are able to change all of the things you ought 
to change, safety, and can do so for the life of your 
codebase. 

Programming is the immediate act of producing code. 
Software engineering is the set of policies, practices, 
and tools that are necessary to make that code useful 
for as long as it needs to be used and allows collaboration 
across a team. 

A good postmortem should include:
A brief summary of the event
A timeline of the vent, from discovery through investigation 
to resolution 
The primary cause of the event 
Impact and damage assessment 
A set of action items (with owners) to fix the production 
immediately 
A set of action items to prevent the event from happening 
again